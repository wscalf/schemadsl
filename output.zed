// instead of going in reverse, and having to repeat hierarchies, go forward:
// a system "may be subscribed" to a repo (rather than a repo is subscribed by a system)
// test relations
// content/host:h1#workspace@workspace:w1
// workspace:w1#parent@workspace:w2
// workspace:w2#parent@organization:o1
// entitlement_set:ent1#direct_content_provider@content/repository:repo1
// organization:o1#entitlement_grant@entitlement_set:ent1
// entitlement_binding:dent1#arbiter@organization:o1#entitlement_grant
// entitlement_binding:dent1#grant@entitlement_set:ent1
// workspace:w2#entitlement_grant@entitlement_binding:dent1
// role:content_admin#content_host_manage_subscription@user:*
// role_binding:u1_admin#subject@user:u1
// role_binding:u1_admin#granted@role:content_admin
// workspace:w2#user_grant@role_binding:u1_admin

// content/host:h1#workspace@workspace:w1
// workspace:w1#parent@workspace:w2
// workspace:w2#parent@organization:o1
// entitlement_set:ent1#direct_content_provider@content/repository:repo1
// entitlement_set:ent1#direct_content_provider@content/repository:repo2
// entitlement_set:just_repo_1#direct_content_provider@content/repository:repo1
// organization:o1#entitlement_grant@entitlement_set:ent1
// entitlement_binding:dent1#arbiter@organization:o1#entitlement_grant
// entitlement_binding:dent1#grant@entitlement_set:just_repo_1
// workspace:w2#entitlement_grant@entitlement_binding:dent1
// role:content_admin#content_host_manage_subscription@user:*
// role_binding:u1_admin#subject@user:u1
// role_binding:u1_admin#granted@role:content_admin
// workspace:w2#user_grant@role_binding:u1_admin

definition user {}

definition group {
	relation member: user | group#member
}

definition role {
	// content namespace
	relation content_host_manage_subscription: user:*

	// openshift namespace
	relation openshift_cluster_get : user:* //| user:* with not_deprovisioned_osd_rosa
	relation openshift_cluster_update : user:* //| user:* with not_deprovisioned
	relation openshift_cluster_delete : user:*

	// Can report metrics about openshift/*
	relation openshift_metrics_report : user:*

	relation inventory_host_read: user:*
	relation inventory_host_write: user:*
	relation playbook_dispatcher_run_view_runs: user:*

}

definition role_binding {
	relation subject : user | group#member
	relation granted: role

	// {resourceType}_{action} = subject & granted->{resourceType}_{action}
	permission content_host_manage_subscription = subject & granted->content_host_manage_subscription

	permission openshift_metrics_report = subject & granted->openshift_metrics_report	

	permission inventory_host_read = subject & granted->inventory_host_read
	permission inventory_host_write = subject & granted->inventory_host_write
	permission playbook_dispatcher_run_view_runs = subject & granted->playbook_dispatcher_run_view_runs

}

definition realm {
	relation user_grant: role_binding
}

definition organization {
	// every org should get an realm relation to a common root
	relation realm: realm
	relation user_grant: role_binding

	// authority=service provider
	// the authority is important, because you can assign entitlement_sets to workspaces all you want,
	// but the service provider has to agree.
	// the authority is about "meta permissions": what party is authorized to write these relations
	relation entitlement_grant: entitlement_set | entitlement_binding // with expiration

	permission content_provider = entitlement_grant->content_provider
}

definition workspace {
	// if you want folders instead of recursive workspaces, change that here
	// authority=org
	relation parent: workspace | organization
	relation user_grant: role_binding
	relation entitlement_grant: entitlement_binding // with expiration

	// synthetic relation for hierarchy
	// requires repeating all entitlement_sets at workspace & org levels though
	// Note: it's important this permission name does NOT collid with organization content_provider which
	// is not meant to be inherited
	permission granted_content_provider = entitlement_grant->content_provider
	permission content_host_provide_content = granted_content_provider + parent->content_host_provide_content
	
	permission content_register_host = user_grant->content_register_host + parent->content_register_host
	permission content_host_manage_subscription = user_grant->content_host_manage_subscription + parent->content_host_manage_subscription

	// Openshift namespace
	permission openshift_metrics_report = (user_grant->openshift_metrics_report & entitlement_grant->openshift_metrics_entitled) + parent->openshift_metrics_report

	permission inventory_host_read = user_grant->inventory_host_read + parent->inventory_host_read
	permission inventory_host_write = user_grant->inventory_host_write + parent->inventory_host_write
	permission playbook_dispatcher_run_view_runs = user_grant->playbook_dispatcher_run_view_runs + parent->playbook_dispatcher_run_view_runs

}

definition entitlement_set {
	relation provider: entitlement_set

	// content namespace
	relation direct_content_provider: content/repository

	// allows hierarchical entitlement_set sets
	permission content_provider = direct_content_provider + provider->content_provider

	// support namespace
	relation direct_support_case_entitled: user:*

	// observability namespace
	relation direct_openshift_metrics_entitled: user:*
	
	permission openshift_metrics_entitled = direct_openshift_metrics_entitled + provider->openshift_metrics_entitled

// <GENERATED_ENTITLEMENT_PERMS_HERE>
}

definition entitlement_binding {
	// this makes lifecycle tied to an organization or workspace's entitlement
	relation arbiter: entitlement_set | entitlement_binding
	relation grant: entitlement_set

	permission content_provider = arbiter->content_provider & grant->content_provider

	permission openshift_metrics_entitled = arbiter->openshift_metrics_entitled & grant->openshift_metrics_entitled

// <GENERATED_ENTITLEMENTBINDING_PERMS_HERE>
}

definition content/repository {
}

definition content/host {
	relation workspace: workspace
	relation user_grant: role_binding

	permission manage_subscription = user_grant->content_host_manage_subscription + workspace->content_host_manage_subscription

	// find path to entitled repository
	permission provide_content = workspace->content_host_provide_content
}

definition openshift/cluster {
	relation workspace: workspace
	relation user_grant: role_binding
	relation entitlement_grant: entitlement_set | entitlement_binding

	permission metrics_report = (user_grant->openshift_metrics_report & entitlement_grant->openshift_metrics_entitled) + workspace->openshift_metrics_report
}

// knowing that a metric with labels...
// tenant=openshift
// cluster=1
// namespace=2
// means the resource openshift/namespace:1/2
// see if user:u1 is authority over namespace 1/2 metrics
// check namespace:1/2#metrics_report@user:u1
// then knowing tenant=openshift,
// check if that tenant is a metrics provider to that resource (namespace 1/2)
// check namespace:1/2#metrics_provider@rhobs/tenant:openshift
// this will be gated on whether it has been directly entitled by openshift, or if the cluster,
// or the workspace, or the organization has been entitled
// we could also name the entitlement after the rhobs tenant
// in which case we could combine to a single check with a user-feature-style entitlement
definition openshift/namespace {
	relation cluster: openshift/cluster
	relation user_grant: role_binding
	relation entitlement_grant: entitlement_set | entitlement_binding

	permission metrics_report = (user_grant->openshift_metrics_report & entitlement_grant->openshift_metrics_entitled) + cluster->metrics_report
}

definition inventory/host {
	relation workspace: workspace

	permission read = workspace->inventory_host_read
	permission write = workspace->inventory_host_write
}

definition playbook_dispatcher/run {
	relation workspace: workspace

	permission view_runs = workspace->playbook_dispatcher_run_view_runs
}

